buildscript {
    ext.kotlin_version = '1.2.41'
    ext.spring_boot_version = '2.0.1.RELEASE'

    repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_version"
        classpath 'gradle.plugin.org.jlleitschuh.gradle:ktlint-gradle:3.2.0'
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.5'
        classpath 'nu.studer:gradle-jooq-plugin:2.0.9'
        classpath 'gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.13.0'
        classpath 'org.yaml:snakeyaml:1.18'
        classpath 'mysql:mysql-connector-java:6.0.6'
    }
}

plugins {
    id "org.liquibase.gradle" version "1.2.4"
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.jlleitschuh.gradle.ktlint'
apply plugin: 'com.google.protobuf'
apply plugin: 'nu.studer.jooq'
apply plugin: 'com.palantir.docker'

jar {
    baseName = 'grpc-gke-message-sample'
    version = '0.0.1'
}

repositories {
    jcenter()
    mavenCentral()
}

sourceSets {
    main {
        proto {
            srcDir '../protofiles'
        }
    }
    main.kotlin.srcDirs += 'src/main/kotlin'
    main.kotlin.srcDirs += 'src/main/generated-proto'
    main.kotlin.srcDirs += 'src/main/generated-jooq'
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    compile 'org.springframework.boot:spring-boot-starter-jooq'
    compile 'org.springframework.boot:spring-boot-devtools'
    compile 'org.lognet:grpc-spring-boot-starter:2.3.1'
    compile 'org.jooq:jooq'
    compile 'org.apache.commons:commons-lang3:3.7'
    compile 'mysql:mysql-connector-java'
    compile 'org.liquibase:liquibase-core'

    runtime 'com.h2database:h2'

    jooqRuntime 'com.h2database:h2'
    jooqRuntime 'mysql:mysql-connector-java'

    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'junit:junit:4.12'
    testCompile 'io.grpc:grpc-testing:1.11.0'
    testCompile 'org.assertj:assertj-core:3.10.0'
    testCompile 'com.ninja-squad:DbSetup-kotlin:2.1.0'
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.5.1'
    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.11.0'
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    outputSubDir = 'generated-proto'
                }
            }
            task.plugins {
                grpc {
                    outputSubDir = 'generated-proto'
                }
            }
        }
    }
    generatedFilesBaseDir = "${projectDir}/src/"
}

jooq {
    version = '3.10.1'
    edition = 'OSS'
    worker(sourceSets.main) {
        jdbc {
            driver = 'com.mysql.jdbc.Driver'
            url = 'jdbc:mysql://127.0.0.1:3316'
            user = 'root'
            password = 'password'
        }
        generator {
            database {
                name = 'org.jooq.util.mysql.MySQLDatabase'
                inputSchema = 'sample'
            }
            generate {
                javaTimeTypes = true
            }
            target {
                packageName = 'generated.jooq'
                directory = 'src/main/generated-jooq/'
            }
        }
    }
}

docker {
    dependsOn build
    name "${bootJar.baseName}"
    files bootJar.archivePath
    buildArgs(['JAR_FILE': "${bootJar.archiveName}"])

}

def changeLog = "$projectDir/changelogs.yaml"

liquibase {
    activities {
        main {
            changeLogFile changeLog
            url 'jdbc:mysql://127.0.0.1:3316/sample?nullNamePatternMatchesAll=true&createDatabaseIfNotExist=true'
            username 'root'
            password 'password'
        }
    }
}

bootRun {
    systemProperties System.properties
}

project.tasks.getByName('compileJava').dependsOn -= 'generateWorkerJooqSchemaSource'
project.tasks.getByName('clean').dependsOn -= 'cleanGenerateWorkerJooqSchemaSource'
